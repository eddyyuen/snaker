worker_processes  2;

events {
    worker_connections  4096;
}

# optional: path of snaker.conf
env snaker_CONF;

http {
    fastcgi_intercept_errors on;      #表明使用自定义错误提示

    resolver 114.114.114.114; # replace it with your favorite config
    charset UTF-8;
    include mime.types;

    log_format  main '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$request_time" "$ssl_protocol" "$ssl_cipher" "$http_x_forwarded_for"'
    '"$upstream_addr" "$upstream_status" "$upstream_response_length" "$upstream_response_time"';

    access_log  logs/access.log  main;
    error_log logs/error.log info;

    sendfile        on;
    keepalive_timeout  65;

    map $http_upgrade $connection_upgrade {
        websocket upgrade;
        default $http_connection;
    }

    root D:\webapplication\Snaker;

    #
    # Config client_body_buffer_size equal client_max_body_size for enforcing in-memory buffering of the whole request body
    # ref: https://github.com/openresty/lua-nginx-module/issues/521
    #
    # official instruct docs http://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size
    #
    client_body_buffer_size 1m;
    client_max_body_size 1m;

    #----------------------------snaker configuration-----------------------------
    lua_package_path '$prefix/lib/lualib/?.lua;$prefix/lib/?.lua;$prefix/lib/snaker/lib/lua-resty-http/lib/?.lua;$prefix/lib/snaker/lib/lua-resty-worker-events/lib/?.lua;;';
    lua_code_cache on;

    lua_shared_dict snaker_data 20m; # should not removed. used for snaker data, e.g. plugins configurations..

    lua_shared_dict status 1m; # used for global statistic, see plugin: stat
    lua_shared_dict waf_status 1m; # used for waf statistic, see plugin: waf
    lua_shared_dict monitor 10m; # used for url monitor statistic, see plugin: monitor
    lua_shared_dict rate_limit 10m; # used for rate limiting count, see plugin: rate_limiting
    lua_shared_dict property_rate_limiting 10m; # used for rate limiting count, see plugin: rate_limiting
    lua_shared_dict consul_upstream 5m; # used for consul_upstream, see plugin consul_balancer
    lua_shared_dict consul_upstream_watch 5m; # used for consul_upstream_watch, consul_balancer
    lua_shared_dict consul_upstream_stat 1m; # used for consul upstream statistic, see plugin : consul_balancer
    lua_shared_dict process_events 1m; # used for worker-events


    init_by_lua_block {
        local snaker = require("snaker.snaker")
        local config_file = env_snaker_conf or ngx.config.prefix().. "conf/snaker.conf"
        local config, store = snaker.init({
            config = config_file
        })

        -- the snaker context
        context = {
            snaker = snaker,
            store = store,
            config = config
        }
    }

    init_worker_by_lua_block {
        
        local snaker = context.snaker
        snaker.init_worker()

        local snakerweb = require("dashboard.snakerweb")
        snakerweb.init()
    }

    # main server
    server {
        listen       9099;
        #server_name  my_domain.com;

        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        location / {
            set $upstream_host $host;
            set $upstream_request_uri '';
            set $upstream_url '';
            set $upstream_scheme '';
            # set $target '';

            rewrite_by_lua_block {
                local snaker = context.snaker
                snaker.redirect()
                snaker.rewrite()
            }

            access_by_lua_block {
                local snaker = context.snaker
                snaker.access()
            }

            # proxy
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Scheme $scheme;
            proxy_set_header Host $upstream_host;
            # proxy_pass $upstream_scheme$upstream_url$upstream_request_uri;
            proxy_pass $upstream_scheme$upstream_url$upstream_request_uri;
            # proxy_pass http://default_upstream;

            header_filter_by_lua_block {
                local snaker = context.snaker
                snaker.header_filter()
            }

            body_filter_by_lua_block {
                local snaker = context.snaker
                snaker.body_filter()
            }

            log_by_lua_block {
                local snaker = context.snaker
                snaker.log()
            }
        }

        location /robots.txt {
            return 200 'User-agent: *\nDisallow: /';
        }
        error_page   501              /500.html;
        location = /500.html {
            content_by_lua_block {
                ngx.say('not found')
            }
        } 
    }

  upstream snaker_upstream { 
      server 127.0.0.1;
     balancer_by_lua_block {
        local snaker = context.snaker
        snaker.balancer()
     }
  }
   upstream default_upstream {
        server 127.0.0.1:8008;
    }
    server {
        listen 8008;
        access_log logs/default_upstream_access.log main;
        error_log logs/default_upstream_error.log;

        location / {
            content_by_lua_block {
                ngx.status = 200
                ngx.say("not found")
                ngx.exit(200)
            }
        }
    }
   # orange dashboard server
    server {
        listen       9098;
        stub_status on;
        #server_name  localhost;
        access_log logs/dashboard_access.log main;
        error_log logs/dashboard_error.log info;

        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        location /robots.txt {
            return 200 'User-agent: *\nDisallow: /';
        }
        # dashboard的静态文件
        location ~* /static/(.*) {
            alias lib/dashboard/static/$1;
        }


        # dashboard的静态文件
        location / {
            set $template_root 'lib/dashboard/views';
            content_by_lua_block {
                local main = require("dashboard.snakerweb")
                main.run()
            }
        }

      
    }    

    # api server
    # server {
    #     listen       7777;
    #     #server_name  localhost;
    #     access_log ./logs/api_access.log main;
    #     error_log ./logs/api_error.log info;

    #     location = /favicon.ico {
    #         log_not_found off;
    #         access_log off;
    #     }

    #     location /robots.txt {
    #         return 200 'User-agent: *\nDisallow: /';
    #     }

    #     location / {
    #         content_by_lua_block {
    #             local main = require("api.main")
    #             main:run()
    #         }
    #     }
    # }

}